// src/pages/UnifiedPersonalDashboard.jsx - VERS√ÉO REDESENHADA
import React, { useState, useMemo } from 'react';
// Precisa importar X tamb√©m
import { 
  Users, Upload, Download, Search, Filter, BarChart3, TrendingUp,
  FileSpreadsheet, AlertCircle, AlertTriangle, CheckCircle, MapPin,
  Activity, User, Star, DollarSign, Eye, ChevronRight, Trash2,
  Calendar, Clock, UserX, X
} from 'lucide-react';
import NavBar from '../components/NavBar.jsx';
import UnifiedPersonalUploader from '../components/personal/UnifiedPersonalUploader';
import PersonalStudentTable from '../components/personal/PersonalStudentTable';
import { usePersonals } from '../hooks/usePersonals';

export default function UnifiedPersonalDashboard() {
  const [selectedView, setSelectedView] = useState('dashboard');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedUnidade, setSelectedUnidade] = useState('all');
  const [selectedPersonal, setSelectedPersonal] = useState('');
  const [selectedSituacao, setSelectedSituacao] = useState('');
  const [activeTab, setActiveTab] = useState('overview'); // 'overview' | 'tax-validation' | 'pending-students'
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState('');
  const [successMessages, setSuccessMessages] = useState([]);
  const [errors, setErrors] = useState([]);
  const [showStudents, setShowStudents] = useState(false);
  const [selectedPersonalForStudents, setSelectedPersonalForStudents] = useState('');
  
  // Hooks para cada unidade
  const alphaville = usePersonals('alphaville');
  const buenavista = usePersonals('buenavista'); 
  const marista = usePersonals('marista');

  // Dados unificados
  const allPersonalsData = useMemo(() => {
    const data = [
      ...alphaville.personals.map(p => ({ ...p, unidade: 'alphaville' })),
      ...buenavista.personals.map(p => ({ ...p, unidade: 'buenavista' })),
      ...marista.personals.map(p => ({ ...p, unidade: 'marista' }))
    ];
    return data;
  }, [alphaville.personals, buenavista.personals, marista.personals]);

  // Fun√ß√£o para filtrar alunos reais
  const isRealStudent = (aluno) => {
    if (!aluno) return false;
    const alunoLower = aluno.toLowerCase().trim();
    const adminKeywords = [
      'assinar contrato', 'atualizar telefone', 'atualizar cpf', 'observar se tem alunos',
      'caso nao solicitar isencao', 'caso n√£o solicitar isen√ß√£o', 'solicitar isen√ß√£o',
      'alunos de personal do alphaville', 'alunos de personal no marista', 
      'alunos de personal da buenavista', 'alunos de personal buena vista'
    ];
    return !adminKeywords.some(keyword => alunoLower.includes(keyword));
  };

  const realStudentsData = useMemo(() => {
    return allPersonalsData.filter(item => isRealStudent(item.aluno));
  }, [allPersonalsData]);

  // Fun√ß√£o para classificar alunos
  const classifyStudent = (item) => {
    const valor = item.valorFinal || 0;
    const situacao = item.situacao;
    
    if (valor === 0 && situacao === 'Livre') return 'Aberto';
    if (valor === 0 && situacao === 'Pago') return 'Isento';
    if (valor > 0 && situacao === 'Pago') return 'Quitado';
    return 'Indefinido';
  };

  // üéØ NOVA L√ìGICA: Valida√ß√£o de taxa unificada corrigida
  const validateUnifiedTax = (totalStudents, currentTaxName) => {
    if (!currentTaxName) return { isValid: false, expectedTax: 'Taxa n√£o informada' };
    
    const normalizedCurrent = currentTaxName.toLowerCase();
    let expectedTax = '';
    let isValid = false;
    
    // Determinar a taxa esperada baseada no total de alunos
    if (totalStudents >= 1 && totalStudents <= 7) {
      expectedTax = 'Taxa Personal 1 A 7 Alunos';
      isValid = normalizedCurrent.includes('1 a 7') || normalizedCurrent.includes('1-7');
    } else if (totalStudents >= 8 && totalStudents <= 12) {
      expectedTax = 'Taxa Personal 8 A 12 Alunos';
      isValid = normalizedCurrent.includes('8 a 12') || normalizedCurrent.includes('8-12');
    } else if (totalStudents >= 13 && totalStudents <= 16) {
      expectedTax = 'Taxa Personal 13 A 16 Alunos';
      isValid = normalizedCurrent.includes('13 a 16') || normalizedCurrent.includes('13-16');
    } else if (totalStudents >= 17) {
      expectedTax = 'Taxa Personal Acima 17 Alunos';
      isValid = normalizedCurrent.includes('acima 17') || 
                normalizedCurrent.includes('17 alunos ou mais') ||
                normalizedCurrent.includes('17+') ||
                normalizedCurrent.includes('mais de 17');
    }
    
    return { isValid, expectedTax, totalStudents };
  };

  // Estat√≠sticas por personal (agrupado por pessoa)
  const personalStats = useMemo(() => {
    const filteredData = selectedUnidade === 'all' 
      ? realStudentsData 
      : realStudentsData.filter(item => item.unidade === selectedUnidade);

    const personalGroups = filteredData.reduce((acc, item) => {
      const personal = item.personal || 'Sem Personal';
      
      if (!acc[personal]) {
        acc[personal] = {
          personal,
          unidades: new Set(),
          alunos: new Set(),
          alunosAbertos: new Set(),
          alunosIsentos: new Set(),
          alunosQuitados: new Set(),
          totalFaturamento: 0,
          produtos: new Set() // Rastrear produtos aplicados
        };
      }
      
      const classification = classifyStudent(item);
      
      acc[personal].unidades.add(item.unidade);
      acc[personal].alunos.add(item.aluno);
      acc[personal].totalFaturamento += (item.valorFinal || 0);
      
      // Adicionar produtos/taxas aplicados
      if (item.produto) acc[personal].produtos.add(item.produto);
      if (item.plano) acc[personal].produtos.add(item.plano);
      
      switch (classification) {
        case 'Aberto':
          acc[personal].alunosAbertos.add(item.aluno);
          break;
        case 'Isento':
          acc[personal].alunosIsentos.add(item.aluno);
          break;
        case 'Quitado':
          acc[personal].alunosQuitados.add(item.aluno);
          break;
        default:
          console.warn('Aluno n√£o classificado:', item);
      }
      
      return acc;
    }, {});

    const personalArray = Object.values(personalGroups).map(group => {
      const alunosAbertos = group.alunosAbertos.size;
      const alunosIsentos = group.alunosIsentos.size;
      const alunosQuitados = group.alunosQuitados.size;
      const unidadesArray = Array.from(group.unidades);
      const produtosArray = Array.from(group.produtos);
      
      return {
        ...group,
        totalAlunos: group.alunos.size,
        alunosAbertos,
        alunosIsentos, 
        alunosQuitados,
        unidades: unidadesArray,
        produtos: produtosArray,
        unidade: unidadesArray.length === 1 ? unidadesArray[0] : 'M√∫ltiplas',
        alunos: Array.from(group.alunos),
        alunosParaDivergencia: alunosQuitados + alunosIsentos
      };
    }).sort((a, b) => b.totalAlunos - a.totalAlunos);

    return {
      personalsData: personalArray,
      totalPersonals: personalArray.length,
      totalAlunosReais: filteredData.length,
      totalAlunosUnicos: [...new Set(filteredData.map(item => item.aluno))].length,
      valorTotalFaturamento: filteredData.reduce((sum, item) => sum + (item.valorFinal || 0), 0)
    };
  }, [realStudentsData, selectedUnidade]);

  // üéØ VALIDA√á√ÉO DE TAXAS CORRIGIDA
  const taxValidationData = useMemo(() => {
    return personalStats.personalsData.map(personal => {
      // Pegar o primeiro produto encontrado como refer√™ncia
      const currentTax = personal.produtos[0] || 'Taxa n√£o informada';
      const validation = validateUnifiedTax(personal.totalAlunos, currentTax);
      
      return {
        ...personal,
        taxValidation: {
          ...validation,
          currentTax: personal.produtos.join(', '),
          hasMultipleTaxes: personal.produtos.length > 1
        }
      };
    });
  }, [personalStats.personalsData]);

  // üéØ PERSONALS COM ALUNOS EM ABERTO
  // Filtrar nomes para autocomplete
  const filteredNames = useMemo(() => {
    if (!searchTerm) return [];
    return personalStats.personalsData.map(personal => personal.personal).filter(name => 
      name.toLowerCase().includes(searchTerm.toLowerCase())
    ).slice(0, 8);
  }, [personalStats.personalsData, searchTerm]);

  // Dados filtrados por busca
  const filteredPersonalStats = useMemo(() => {
    if (!searchTerm) return personalStats.personalsData;
    return personalStats.personalsData.filter(personal =>
      personal.personal.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [personalStats.personalsData, searchTerm]);

  const personalsWithPendingStudents = useMemo(() => {
    return filteredPersonalStats.filter(personal => personal.alunosAbertos > 0);
  }, [filteredPersonalStats]);

  // Estat√≠sticas gerais
  const stats = useMemo(() => {
    const totalPersonals = personalStats.totalPersonals;
    const totalStudents = personalStats.totalAlunosUnicos;
    const invalidTaxes = taxValidationData.filter(p => !p.taxValidation.isValid).length;
    const pendingStudents = personalsWithPendingStudents.length;
    const totalPendingCount = personalsWithPendingStudents.reduce((sum, p) => sum + p.alunosAbertos, 0);
    
    return {
      totalPersonals,
      totalStudents,
      invalidTaxes,
      validTaxes: totalPersonals - invalidTaxes,
      pendingStudents,
      totalPendingCount
    };
  }, [personalStats, taxValidationData, personalsWithPendingStudents]);

  // Fun√ß√µes para modal de exclus√£o
  const handleDeleteAllData = () => {
    setShowDeleteModal(true);
  };

  const cancelDelete = () => {
    setShowDeleteModal(false);
    setDeleteConfirmText('');
  };

  const confirmDeleteAllData = async () => {
    if (deleteConfirmText !== "CONFIRMAR EXCLUS√ÉO") return;
    
    try {
      setSuccessMessages(['Todos os dados foram exclu√≠dos com sucesso!']);
      setErrors([]);
      setShowDeleteModal(false);
      setDeleteConfirmText('');
      // Aqui voc√™ pode adicionar a l√≥gica real de exclus√£o
    } catch (error) {
      setErrors(['Erro ao excluir dados: ' + error.message]);
      setSuccessMessages([]);
    }
  };

  // Fun√ß√£o para obter alunos de um personal espec√≠fico
  const getStudentsForPersonal = (personalName) => {
    return realStudentsData.filter(item => item.personal === personalName)
      .map(item => ({
        ...item,
        classificacao: classifyStudent(item)
      }))
      .sort((a, b) => {
        const order = { 'Aberto': 0, 'Isento': 1, 'Quitado': 2, 'Indefinido': 3 };
        return order[a.classificacao] - order[b.classificacao];
      });
  };

  // Fun√ß√£o para lidar com visualiza√ß√£o de alunos
  const handleViewStudents = (personalName) => {
    setSelectedPersonalForStudents(personalName);
    setShowStudents(true);
  };

  // Componente: Card de Estat√≠sticas
  const StatCard = ({ icon: Icon, title, value, subtitle, color = "blue", onClick }) => (
    <div 
      className={`stat-card stat-card-${color} ${onClick ? 'clickable' : ''}`}
      onClick={onClick}
    >
      <div className="stat-icon">
        <Icon size={24} />
      </div>
      <div className="stat-content">
        <div className="stat-value">{value}</div>
        <div className="stat-title">{title}</div>
        {subtitle && <div className="stat-subtitle">{subtitle}</div>}
      </div>
    </div>
  );

  // Componente: Relat√≥rio de Valida√ß√£o de Taxas
  const TaxValidationReport = () => {
    const invalidTaxes = taxValidationData.filter(p => !p.taxValidation.isValid);
    
    if (invalidTaxes.length === 0) {
      return (
        <div className="validation-success">
          <CheckCircle size={48} />
          <h3>Todas as taxas est√£o corretas!</h3>
          <p>Todos os personals t√™m taxas adequadas para sua quantidade de alunos</p>
          
          {/* Messages */}
          {successMessages.length > 0 && (
            <div className="message success-message">
              <CheckCircle size={20} />
              <span>{successMessages[0]}</span>
            </div>
          )}
          
          {errors.length > 0 && (
            <div className="message error-message">
              <AlertCircle size={20} />
              <span>{errors[0]}</span>
            </div>
          )}
        </div>
      );
    }

  return (
      <div className="validation-issues">
        <div className="issues-header">
          <h3>
            <AlertTriangle size={20} />
            {invalidTaxes.length} Personal{invalidTaxes.length > 1 ? 's' : ''} com Taxa Incorreta
          </h3>
        </div>
        
        <div className="issues-list">
          {invalidTaxes.map((personal, index) => (
            <div key={index} className="issue-card">
              <div className="issue-header">
                <div className="personal-info">
                  <User size={16} />
                  <span className="personal-name">{personal.personal}</span>
                  <span className="units-badge">
                    {personal.unidades.join(', ')}
                  </span>
                </div>
                <div className="student-count">
                  {personal.totalAlunos} alunos
                </div>
              </div>
              
              <div className="issue-details">
                <div className="tax-comparison">
                  <div className="current-tax">
                    <label>Taxa Atual:</label>
                    <span className="tax-value error">{personal.taxValidation.currentTax}</span>
                  </div>
                  <div className="expected-tax">
                    <label>Taxa Esperada:</label>
                    <span className="tax-value correct">{personal.taxValidation.expectedTax}</span>
                  </div>
                </div>
                
                <div className="students-breakdown">
                  <div className="breakdown-item">
                    <Activity size={14} />
                    <span>{personal.alunosAbertos} Abertos</span>
                  </div>
                  <div className="breakdown-item">
                    <CheckCircle size={14} />
                    <span>{personal.alunosIsentos} Isentos</span>
                  </div>
                  <div className="breakdown-item">
                    <DollarSign size={14} />
                    <span>{personal.alunosQuitados} Quitados</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Componente: Personals com Alunos Pendentes
  const PendingStudentsReport = () => {
    if (personalsWithPendingStudents.length === 0) {
      return (
        <div className="validation-success">
          <CheckCircle size={48} />
          <h3>Nenhum aluno em aberto!</h3>
          <p>Todos os alunos est√£o com situa√ß√£o regularizada</p>
        </div>
      );
    }

    return (
      <div className="pending-issues">
        <div className="issues-header">
          <h3>
            <Clock size={20} />
            {personalsWithPendingStudents.length} Personal{personalsWithPendingStudents.length > 1 ? 's' : ''} com Alunos em Aberto
          </h3>
          <div className="total-pending">
            Total: {stats.totalPendingCount} alunos pendentes
          </div>
        </div>
        
        <div className="pending-list">
          {personalsWithPendingStudents.map((personal, index) => (
            <div key={index} className="pending-card">
              <div className="pending-header">
                <div className="personal-info">
                  <User size={16} />
                  <span className="personal-name">{personal.personal}</span>
                  <span className="units-badge">
                    {personal.unidades.join(', ')}
                  </span>
                </div>
                <div className="pending-count">
                  <Clock size={16} />
                  {personal.alunosAbertos} em aberto
                </div>
              </div>
              
              <div className="pending-details">
                <div className="students-summary">
                  <div className="summary-item">
                    <span className="label">Total de Alunos:</span>
                    <span className="value">{personal.totalAlunos}</span>
                  </div>
                  <div className="summary-item">
                    <span className="label">Abertos:</span>
                    <span className="value pending">{personal.alunosAbertos}</span>
                  </div>
                  <div className="summary-item">
                    <span className="label">Isentos:</span>
                    <span className="value">{personal.alunosIsentos}</span>
                  </div>
                  <div className="summary-item">
                    <span className="label">Quitados:</span>
                    <span className="value">{personal.alunosQuitados}</span>
                  </div>
                </div>
                
                <button 
                  className="view-details-btn"
                  onClick={() => setSelectedPersonal(personal.personal)}
                >
                  <Eye size={14} />
                  Ver Detalhes
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="unified-personal-dashboard">
      <NavBar 
        showBackToModules={true}
        currentModule="Personal"
        moduleColor="#8b5cf6"
      />
      
      <div className="dashboard-content">
        {/* Header Principal */}
        <div className="dashboard-header">
          <div className="header-content">
            <div className="header-text">
              <h1>
                <Users size={32} />
                Personal Trainers
              </h1>
              <p>Gest√£o unificada e valida√ß√£o de taxas</p>
            </div>
            
            <div className="header-actions">
              <button 
                className={`view-btn ${selectedView === 'dashboard' ? 'active' : ''}`}
                onClick={() => setSelectedView('dashboard')}
              >
                <BarChart3 size={18} />
                Dashboard
              </button>
              <button 
                className={`view-btn ${selectedView === 'upload' ? 'active' : ''}`}
                onClick={() => setSelectedView('upload')}
              >
                <Upload size={18} />
                Upload
              </button>
              <button 
                className="delete-btn"
                onClick={handleDeleteAllData}
                title="Excluir todos os dados"
              >
                <Trash2 size={18} />
                Excluir Tudo
              </button>
            </div>
          </div>
        </div>

        {selectedView === 'upload' ? (
          <div className="upload-section">
            <UnifiedPersonalUploader />
          </div>
        ) : (
          <>
            {/* Cards de Estat√≠sticas Principais */}
            <div className="stats-grid">
              <StatCard
                icon={Users}
                title="Total de Personals"
                value={stats.totalPersonals}
                subtitle="Ativos em todas as unidades"
                color="blue"
              />
              <StatCard
                icon={User}
                title="Total de Alunos"
                value={stats.totalStudents}
                subtitle="Alunos √∫nicos cadastrados"
                color="green"
              />
              <StatCard
                icon={AlertTriangle}
                title="Taxas Incorretas"
                value={stats.invalidTaxes}
                subtitle="Personals com taxa divergente"
                color="red"
                onClick={() => setActiveTab('tax-validation')}
              />
              <StatCard
                icon={Clock}
                title="Alunos em Aberto"
                value={stats.totalPendingCount}
                subtitle={`Em ${stats.pendingStudents} personals`}
                color="orange"
                onClick={() => setActiveTab('pending-students')}
              />
            </div>

            {/* Busca Principal */}
            <div className="search-section">
              <div className="search-header">
                <h2>Buscar Personal Trainer</h2>
                <p>Digite o nome para encontrar informa√ß√µes detalhadas</p>
              </div>
              
              <div className="search-container">
                <div className="search-input-wrapper">
                  <Search size={20} />
                  <input
                    type="text"
                    className="search-input"
                    placeholder="Ex: Jo√£o Carlos Sim√£o..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                  {searchTerm && (
                    <button 
                      className="clear-search"
                      onClick={() => setSearchTerm('')}
                    >
                      √ó
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Tabs de Navega√ß√£o */}
            <div className="tabs-navigation">
              <button 
                className={`tab-btn ${activeTab === 'overview' ? 'active' : ''}`}
                onClick={() => setActiveTab('overview')}
              >
                <BarChart3 size={16} />
                Vis√£o Geral
              </button>
              <button 
                className={`tab-btn ${activeTab === 'tax-validation' ? 'active' : ''}`}
                onClick={() => setActiveTab('tax-validation')}
              >
                <AlertTriangle size={16} />
                Valida√ß√£o de Taxas
                {stats.invalidTaxes > 0 && (
                  <span className="badge">{stats.invalidTaxes}</span>
                )}
              </button>
              <button 
                className={`tab-btn ${activeTab === 'pending-students' ? 'active' : ''}`}
                onClick={() => setActiveTab('pending-students')}
              >
                <Clock size={16} />
                Alunos em Aberto
                {stats.totalPendingCount > 0 && (
                  <span className="badge">{stats.totalPendingCount}</span>
                )}
              </button>
            </div>

            {/* Conte√∫do das Tabs */}
            <div className="tab-content">
              {activeTab === 'overview' && (
                <div className="overview-content">
                  {searchTerm ? (
                    // Mostra resultados da busca
                    <div className="search-results-section">
                      <div className="search-results-header">
                        <h3>
                          <Search size={20} />
                          Resultados para "{searchTerm}"
                        </h3>
                        <button 
                          className="clear-search-btn"
                          onClick={() => setSearchTerm('')}
                        >
                          <X size={16} />
                          Limpar busca
                        </button>
                      </div>
                      
                      {filteredPersonalStats.length > 0 ? (
                        <div className="personal-cards-grid">
                          {filteredPersonalStats.map((personal, index) => (
                            <div key={index} className="personal-result-card">
                              <div className="personal-card-header">
                                <div className="personal-avatar">
                                  <User size={20} />
                                </div>
                                <div className="personal-info">
                                  <h4>{personal.personal}</h4>
                                  <div className="personal-badges">
                                    {personal.unidades.map(unidade => (
                                      <span key={unidade} className={`unit-badge unit-${unidade}`}>
                                        {unidade === 'alphaville' ? 'Alphaville' : 
                                         unidade === 'buenavista' ? 'Buena Vista' : 
                                         unidade === 'marista' ? 'Marista' : unidade}
                                      </span>
                                    ))}
                                  </div>
                                </div>
                              </div>
                              
                              <div className="personal-stats-grid">
                                <div className="stat-item">
                                  <div className="stat-icon users">
                                    <Users size={16} />
                                  </div>
                                  <div className="stat-info">
                                    <span className="stat-number">{personal.totalAlunos}</span>
                                    <span className="stat-label">Total</span>
                                  </div>
                                </div>
                                
                                <div className="stat-item">
                                  <div className="stat-icon pending">
                                    <Clock size={16} />
                                  </div>
                                  <div className="stat-info">
                                    <span className="stat-number">{personal.alunosAbertos}</span>
                                    <span className="stat-label">Abertos</span>
                                  </div>
                                </div>
                                
                                <div className="stat-item">
                                  <div className="stat-icon exempt">
                                    <CheckCircle size={16} />
                                  </div>
                                  <div className="stat-info">
                                    <span className="stat-number">{personal.alunosIsentos}</span>
                                    <span className="stat-label">Isentos</span>
                                  </div>
                                </div>
                                
                                <div className="stat-item">
                                  <div className="stat-icon paid">
                                    <DollarSign size={16} />
                                  </div>
                                  <div className="stat-info">
                                    <span className="stat-number">{personal.alunosQuitados}</span>
                                    <span className="stat-label">Quitados</span>
                                  </div>
                                </div>
                              </div>
                              
                              {/* Valida√ß√£o de Taxa */}
                              <div className="tax-validation-card">
                                {(() => {
                                  const taxValidation = taxValidationData.find(p => p.personal === personal.personal);
                                  const isValid = taxValidation?.taxValidation?.isValid;
                                  
                                  return (
                                    <div className={`tax-status ${isValid ? 'tax-valid' : 'tax-invalid'}`}>
                                      <div className="tax-icon">
                                        {isValid ? <CheckCircle size={16} /> : <AlertTriangle size={16} />}
                                      </div>
                                      <div className="tax-info">
                                        <span className="tax-label">
                                          {isValid ? 'Taxa Correta' : 'Taxa Incorreta'}
                                        </span>
                                        {!isValid && taxValidation && (
                                          <div className="tax-details">
                                            <small>Atual: {taxValidation.taxValidation.currentTax}</small>
                                            <small>Esperada: {taxValidation.taxValidation.expectedTax}</small>
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  );
                                })()}
                              </div>
                              
                              <div className="personal-actions">
                                <button 
                                  className="view-students-btn"
                                  onClick={() => handleViewStudents(personal.personal)}
                                >
                                  <Eye size={14} />
                                  Ver Alunos
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="no-search-results">
                          <Search size={48} />
                          <h3>Nenhum personal encontrado</h3>
                          <p>N√£o foram encontrados personals com o termo "{searchTerm}"</p>
                          <button 
                            className="btn btn-primary"
                            onClick={() => setSearchTerm('')}
                          >
                            Ver todos os personals
                          </button>
                        </div>
                      )}
                    </div>
                  ) : (
                    // Mostra tabela geral quando n√£o h√° busca
                    <PersonalStudentTable 
                      personalStats={personalStats}
                      selectedUnidade={selectedUnidade}
                    />
                  )}
                  
                  {/* Se√ß√£o de Alunos do Personal Selecionado */}
                  {showStudents && selectedPersonalForStudents && (
                    <div className="students-section">
                      <div className="students-header">
                        <div className="students-title">
                          <Users size={20} />
                          <h3>Alunos de {selectedPersonalForStudents}</h3>
                          <span className="students-count">
                            {getStudentsForPersonal(selectedPersonalForStudents).length} alunos
                          </span>
                        </div>
                        <button 
                          className="close-students"
                          onClick={() => {
                            setShowStudents(false);
                            setSelectedPersonalForStudents('');
                          }}
                        >
                          <X size={16} />
                          Fechar
                        </button>
                      </div>
                      
                      <div className="students-grid">
                        {getStudentsForPersonal(selectedPersonalForStudents).map((student, index) => (
                          <div key={index} className={`student-card student-${student.classificacao.toLowerCase()}`}>
                            <div className="student-header">
                              <div className="student-info">
                                <h4>{student.aluno}</h4>
                                <div className="student-meta">
                                  <span className="unit-info">
                                    <MapPin size={12} />
                                    {student.unidade}
                                  </span>
                                  <span className={`status-badge status-${student.classificacao.toLowerCase()}`}>
                                    {student.classificacao === 'Aberto' && <Clock size={12} />}
                                    {student.classificacao === 'Isento' && <Activity size={12} />}
                                    {student.classificacao === 'Quitado' && <CheckCircle size={12} />}
                                    {student.classificacao === 'Indefinido' && <AlertCircle size={12} />}
                                    {student.classificacao}
                                  </span>
                                </div>
                              </div>
                            </div>
                            
                            <div className="student-details">
                              <div className="detail-item">
                                <span className="detail-label">Produto:</span>
                                <span className="detail-value">{student.produto || 'N/A'}</span>
                              </div>
                              <div className="detail-item">
                                <span className="detail-label">Valor:</span>
                                <span className="detail-value">
                                  {student.valorFinal > 0 
                                    ? `R$ ${student.valorFinal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}` 
                                    : 'Gratuito'
                                  }
                                </span>
                              </div>
                              <div className="detail-item">
                                <span className="detail-label">Situa√ß√£o:</span>
                                <span className="detail-value">{student.situacao}</span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                      
                      {getStudentsForPersonal(selectedPersonalForStudents).length === 0 && (
                        <div className="no-students">
                          <Users size={48} />
                          <h3>Nenhum aluno encontrado</h3>
                          <p>Este personal n√£o possui alunos cadastrados.</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              )}
              
              {activeTab === 'tax-validation' && (
                <div className="tax-validation-content">
                  <TaxValidationReport />
                </div>
              )}
              
              {activeTab === 'pending-students' && (
                <div className="pending-students-content">
                  <PendingStudentsReport />
                </div>
              )}
            </div>
          </>
        )}
      </div>

      {/* Modal de Confirma√ß√£o de Exclus√£o */}
      {showDeleteModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <div className="warning-icon">
                <AlertCircle size={48} />
              </div>
              <h2>‚ö†Ô∏è Excluir Todos os Dados</h2>
              <p>Esta a√ß√£o √© <strong>IRREVERS√çVEL</strong> e n√£o pode ser desfeita.</p>
            </div>
            
            <div className="modal-body">
              <div className="data-summary">
                <h3>Dados que ser√£o exclu√≠dos:</h3>
                <ul>
                  <li>‚Ä¢ <strong>{stats.totalPersonals}</strong> personal trainers</li>
                  <li>‚Ä¢ <strong>{stats.totalStudents}</strong> alunos cadastrados</li>
                  <li>‚Ä¢ Todos os dados de faturamento</li>
                  <li>‚Ä¢ Dados de todas as unidades (Alphaville, Buena Vista, Marista)</li>
                </ul>
              </div>
              
              <div className="confirmation-input">
                <label>
                  Para confirmar, digite <strong>"CONFIRMAR EXCLUS√ÉO"</strong> no campo abaixo:
                </label>
                <input
                  type="text"
                  value={deleteConfirmText}
                  onChange={(e) => setDeleteConfirmText(e.target.value)}
                  placeholder="Digite: CONFIRMAR EXCLUS√ÉO"
                  className="confirm-input"
                />
              </div>
            </div>
            
            <div className="modal-actions">
              <button 
                className="cancel-btn"
                onClick={cancelDelete}
              >
                Cancelar
              </button>
              <button 
                className="confirm-btn"
                onClick={confirmDeleteAllData}
                disabled={deleteConfirmText !== "CONFIRMAR EXCLUS√ÉO"}
              >
                <Trash2 size={16} />
                Excluir Todos os Dados
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Styles */}
      <style jsx>{`
        .unified-personal-dashboard {
          min-height: 100vh;
          background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        }

        .dashboard-content {
          margin-left: 280px;
          padding: 32px;
          padding-top: 100px;
        }

        /* Header */
        .dashboard-header {
          background: white;
          border-radius: 16px;
          padding: 32px;
          margin-bottom: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .header-content {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .header-text h1 {
          display: flex;
          align-items: center;
          gap: 12px;
          margin: 0 0 8px;
          color: #1e293b;
          font-size: 32px;
          font-weight: 700;
        }

        .header-text p {
          color: #64748b;
          margin: 0;
          font-size: 16px;
        }

        .header-actions {
          display: flex;
          gap: 12px;
        }

        .view-btn {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 12px 20px;
          border-radius: 12px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s ease;
          border: 2px solid #e2e8f0;
          background: white;
          color: #64748b;
        }

        .view-btn:hover {
          border-color: #10b981;
          color: #10b981;
        }

        .view-btn.active {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
          color: white;
          border-color: #10b981;
          box-shadow: 0 4px 16px rgba(16, 185, 129, 0.3);
        }

        .delete-btn {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 12px 20px;
          border-radius: 12px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s ease;
          border: 2px solid #ef4444;
          background: white;
          color: #ef4444;
        }

        .delete-btn:hover {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
          color: white;
          border-color: #ef4444;
          box-shadow: 0 4px 16px rgba(239, 68, 68, 0.3);
        }

        /* Messages */
        .message {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 16px 20px;
          border-radius: 12px;
          font-weight: 500;
          margin-top: 16px;
        }

        .success-message {
          background: rgba(16, 185, 129, 0.1);
          color: #059669;
          border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .error-message {
          background: rgba(239, 68, 68, 0.1);
          color: #dc2626;
          border: 1px solid rgba(239, 68, 68, 0.2);
        }

        /* Stats Grid */
        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 20px;
          margin-bottom: 32px;
        }

        .stat-card {
          background: white;
          border-radius: 16px;
          padding: 24px;
          display: flex;
          align-items: center;
          gap: 16px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
          transition: all 0.3s ease;
          border: 2px solid transparent;
        }

        .stat-card.clickable {
          cursor: pointer;
        }

        .stat-card:hover {
          transform: translateY(-4px);
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        }

        .stat-card.clickable:hover {
          border-color: #10b981;
        }

        .stat-icon {
          width: 56px;
          height: 56px;
          border-radius: 16px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-weight: 600;
        }

        .stat-card-blue .stat-icon {
          background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        }

        .stat-card-green .stat-icon {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .stat-card-red .stat-icon {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .stat-card-orange .stat-icon {
          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .stat-content {
          flex: 1;
        }

        .stat-value {
          font-size: 32px;
          font-weight: 800;
          color: #1e293b;
          line-height: 1;
          margin-bottom: 4px;
        }

        .stat-title {
          font-size: 16px;
          font-weight: 600;
          color: #475569;
          margin-bottom: 2px;
        }

        .stat-subtitle {
          font-size: 14px;
          color: #64748b;
        }

        /* Search Section */
        .search-section {
          background: white;
          border-radius: 16px;
          padding: 32px;
          margin-bottom: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
          text-align: center;
        }

        .search-header h2 {
          margin: 0 0 8px;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
        }

        .search-header p {
          color: #64748b;
          margin: 0 0 24px;
        }

        .search-container {
          max-width: 500px;
          margin: 0 auto;
        }

        .search-input-wrapper {
          position: relative;
          display: flex;
          align-items: center;
        }

        .search-input-wrapper svg {
          position: absolute;
          left: 16px;
          color: #64748b;
          z-index: 2;
        }

        .search-input {
          width: 100%;
          padding: 16px 20px 16px 52px;
          font-size: 16px;
          border: 2px solid #e2e8f0;
          border-radius: 16px;
          background: #f8fafc;
          transition: all 0.3s ease;
        }

        .search-input:focus {
          outline: none;
          border-color: #10b981;
          background: white;
          box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.1);
        }

        .clear-search {
          position: absolute;
          right: 16px;
          background: #ef4444;
          color: white;
          border: none;
          border-radius: 50%;
          width: 28px;
          height: 28px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .clear-search:hover {
          background: #dc2626;
          transform: scale(1.1);
        }

        /* Tabs Navigation */
        .tabs-navigation {
          display: flex;
          gap: 8px;
          margin-bottom: 24px;
          background: white;
          padding: 8px;
          border-radius: 16px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .tab-btn {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 12px 20px;
          border: none;
          background: transparent;
          color: #64748b;
          border-radius: 12px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s ease;
          position: relative;
        }

        .tab-btn:hover {
          background: #f8fafc;
          color: #10b981;
        }

        .tab-btn.active {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
          color: white;
          box-shadow: 0 4px 16px rgba(16, 185, 129, 0.3);
        }

        .badge {
          background: #ef4444;
          color: white;
          border-radius: 12px;
          padding: 2px 8px;
          font-size: 12px;
          font-weight: 600;
          margin-left: 4px;
        }

        .tab-btn.active .badge {
          background: rgba(255, 255, 255, 0.2);
        }

        /* Tab Content */
        .tab-content {
          background: white;
          border-radius: 16px;
          padding: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
          min-height: 400px;
        }

        /* Validation Success/Issues */
        .validation-success {
          text-align: center;
          padding: 60px 20px;
          color: #059669;
        }

        .validation-success svg {
          margin: 0 auto 16px;
          color: #10b981;
        }

        .validation-success h3 {
          margin: 0 0 8px;
          color: #059669;
          font-size: 24px;
        }

        .validation-success p {
          margin: 0;
          color: #64748b;
        }

        .validation-issues,
        .pending-issues {
          width: 100%;
        }

        .issues-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 24px;
          padding-bottom: 16px;
          border-bottom: 2px solid #f1f5f9;
        }

        .issues-header h3 {
          display: flex;
          align-items: center;
          gap: 8px;
          margin: 0;
          color: #dc2626;
          font-size: 20px;
          font-weight: 600;
        }

        .total-pending {
          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
          color: white;
          padding: 8px 16px;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 600;
        }

        .issues-list,
        .pending-list {
          display: flex;
          flex-direction: column;
          gap: 16px;
        }

        .issue-card,
        .pending-card {
          background: #fef2f2;
          border: 2px solid #fecaca;
          border-radius: 12px;
          padding: 20px;
          transition: all 0.3s ease;
        }

        .pending-card {
          background: #fffbeb;
          border-color: #fed7aa;
        }

        .issue-card:hover,
        .pending-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        }

        .issue-header,
        .pending-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 16px;
        }

        .personal-info {
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .personal-name {
          font-weight: 600;
          color: #1e293b;
          font-size: 16px;
        }

        .units-badge {
          background: rgba(100, 116, 139, 0.1);
          color: #475569;
          padding: 4px 8px;
          border-radius: 6px;
          font-size: 12px;
          font-weight: 500;
        }

        .student-count {
          background: #dc2626;
          color: white;
          padding: 6px 12px;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 600;
        }

        .pending-count {
          display: flex;
          align-items: center;
          gap: 6px;
          background: #f59e0b;
          color: white;
          padding: 6px 12px;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 600;
        }

        .issue-details,
        .pending-details {
          display: flex;
          flex-direction: column;
          gap: 16px;
        }

        .tax-comparison {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 16px;
        }

        .current-tax,
        .expected-tax {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .current-tax label,
        .expected-tax label {
          font-size: 12px;
          color: #64748b;
          font-weight: 600;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .tax-value {
          padding: 8px 12px;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 500;
        }

        .tax-value.error {
          background: rgba(239, 68, 68, 0.1);
          color: #dc2626;
          border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .tax-value.correct {
          background: rgba(16, 185, 129, 0.1);
          color: #059669;
          border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .students-breakdown {
          display: flex;
          gap: 16px;
          flex-wrap: wrap;
        }

        .breakdown-item {
          display: flex;
          align-items: center;
          gap: 6px;
          padding: 8px 12px;
          background: rgba(255, 255, 255, 0.7);
          border-radius: 8px;
          font-size: 14px;
          color: #475569;
        }

        .students-summary {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
          gap: 12px;
        }

        .summary-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px 12px;
          background: rgba(255, 255, 255, 0.7);
          border-radius: 8px;
        }

        .summary-item .label {
          font-size: 12px;
          color: #64748b;
          font-weight: 500;
        }

        .summary-item .value {
          font-size: 14px;
          color: #1e293b;
          font-weight: 600;
        }

        .summary-item .value.pending {
          color: #f59e0b;
        }

        .view-details-btn {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          padding: 10px 16px;
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
          color: white;
          border: none;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s ease;
          align-self: flex-start;
        }

        .view-details-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
        }

        /* Search Section */
        .search-section {
          background: white;
          border-radius: 16px;
          padding: 32px;
          margin-bottom: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
          text-align: center;
        }

        .search-header h2 {
          margin: 0 0 8px;
          color: #1e293b;
          font-size: 28px;
          font-weight: 700;
        }

        .search-header p {
          color: #64748b;
          margin: 0 0 24px;
        }

        .search-container {
          max-width: 500px;
          margin: 0 auto;
        }

        .search-input-wrapper {
          position: relative;
          display: flex;
          align-items: center;
        }

        .search-input-wrapper svg {
          position: absolute;
          left: 16px;
          color: #64748b;
          z-index: 2;
        }

        .search-input {
          width: 100%;
          padding: 16px 20px 16px 52px;
          font-size: 16px;
          border: 2px solid #e2e8f0;
          border-radius: 16px;
          background: #f8fafc;
          transition: all 0.3s ease;
        }

        .search-input:focus {
          outline: none;
          border-color: #10b981;
          background: white;
          box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.1);
        }

        .clear-search {
          position: absolute;
          right: 16px;
          background: #ef4444;
          color: white;
          border: none;
          border-radius: 50%;
          width: 28px;
          height: 28px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          font-size: 18px;
          transition: all 0.3s ease;
        }

        .clear-search:hover {
          background: #dc2626;
          transform: scale(1.1);
        }

        /* Search Results Section */
        .search-results-section {
          background: white;
          border-radius: 16px;
          padding: 32px;
          margin-bottom: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .search-results-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 24px;
          flex-wrap: wrap;
          gap: 16px;
        }

        .search-results-header h3 {
          display: flex;
          align-items: center;
          gap: 12px;
          margin: 0;
          color: #1e293b;
          font-size: 20px;
          font-weight: 600;
        }

        .clear-search-btn {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 8px 16px;
          background: #f1f5f9;
          color: #64748b;
          border: none;
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.3s ease;
          font-size: 14px;
        }

        .clear-search-btn:hover {
          background: #e2e8f0;
          color: #475569;
        }

        /* Personal Cards Grid */
        .personal-cards-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
          gap: 24px;
        }

        .personal-result-card {
          background: white;
          border: 2px solid #e2e8f0;
          border-radius: 16px;
          padding: 24px;
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
        }

        .personal-result-card:hover {
          border-color: #10b981;
          transform: translateY(-4px);
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        }

        .personal-card-header {
          display: flex;
          align-items: center;
          gap: 16px;
          margin-bottom: 20px;
        }

        .personal-avatar {
          width: 48px;
          height: 48px;
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
          border-radius: 12px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          flex-shrink: 0;
        }

        .personal-info h4 {
          margin: 0 0 8px;
          color: #1e293b;
          font-size: 18px;
          font-weight: 600;
        }

        .personal-badges {
          display: flex;
          gap: 8px;
          flex-wrap: wrap;
        }

        .unit-badge {
          padding: 4px 12px;
          border-radius: 20px;
          font-size: 12px;
          font-weight: 500;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .unit-alphaville {
          background: rgba(16, 185, 129, 0.1);
          color: #059669;
        }

        .unit-buenavista {
          background: rgba(59, 130, 246, 0.1);
          color: #1d4ed8;
        }

        .unit-marista {
          background: rgba(245, 158, 11, 0.1);
          color: #d97706;
        }

        /* Personal Stats Grid */
        .personal-stats-grid {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 16px;
          margin-bottom: 20px;
        }

        .stat-item {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 16px;
          background: #f8fafc;
          border-radius: 12px;
          transition: all 0.3s ease;
        }

        .stat-item:hover {
          background: #f1f5f9;
          transform: translateY(-1px);
        }

        .stat-icon {
          width: 36px;
          height: 36px;
          border-radius: 8px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
        }

        .stat-icon.users {
          background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
        }

        .stat-icon.pending {
          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .stat-icon.exempt {
          background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        }

        .stat-icon.paid {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .stat-info {
          flex: 1;
        }

        .stat-number {
          display: block;
          font-size: 18px;
          font-weight: 700;
          color: #1e293b;
          line-height: 1;
          margin-bottom: 2px;
        }

        .stat-label {
          font-size: 12px;
          color: #64748b;
          font-weight: 500;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        /* Tax Validation Card */
        .tax-validation-card {
          margin-bottom: 16px;
          padding: 16px;
          background: #f8fafc;
          border-radius: 12px;
          border: 2px solid transparent;
          transition: all 0.3s ease;
        }

        .tax-status {
          display: flex;
          align-items: center;
          gap: 12px;
        }

        .tax-status.tax-valid {
          color: #059669;
        }

        .tax-status.tax-invalid {
          color: #dc2626;
        }

        .tax-validation-card .tax-status.tax-valid {
          background: rgba(16, 185, 129, 0.05);
          border-color: rgba(16, 185, 129, 0.2);
        }

        .tax-validation-card .tax-status.tax-invalid {
          background: rgba(239, 68, 68, 0.05);
          border-color: rgba(239, 68, 68, 0.2);
        }

        .tax-icon {
          width: 32px;
          height: 32px;
          border-radius: 8px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          flex-shrink: 0;
        }

        .tax-status.tax-valid .tax-icon {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .tax-status.tax-invalid .tax-icon {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .tax-info {
          flex: 1;
        }

        .tax-label {
          display: block;
          font-size: 14px;
          font-weight: 600;
          margin-bottom: 4px;
        }

        .tax-details {
          display: flex;
          flex-direction: column;
          gap: 2px;
        }

        .tax-details small {
          font-size: 11px;
          opacity: 0.8;
          font-weight: 500;
        }

        /* Personal Actions */
        .personal-actions {
          display: flex;
          gap: 12px;
        }

        .view-students-btn {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 10px 16px;
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
          color: white;
          border: none;
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.3s ease;
          font-weight: 500;
          font-size: 14px;
        }

        .view-students-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
        }

        /* No Search Results */
        .no-search-results {
          text-align: center;
          padding: 60px 20px;
          color: #64748b;
        }

        .no-search-results svg {
          color: #cbd5e1;
          margin-bottom: 20px;
        }

        .no-search-results h3 {
          margin: 0 0 12px;
          color: #475569;
          font-size: 20px;
          font-weight: 600;
        }

        .no-search-results p {
          margin: 0 0 24px;
          font-size: 16px;
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 8px;
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          border: none;
        }

        .btn-primary {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
          color: white;
        }

        .btn-primary:hover {
          transform: translateY(-2px);
          box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
        }

        /* Students Section */
        .students-section {
          background: white;
          border-radius: 16px;
          padding: 32px;
          margin-top: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
          border: 2px solid #10b981;
        }

        .students-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 24px;
          padding-bottom: 16px;
          border-bottom: 2px solid #f1f5f9;
        }

        .students-title {
          display: flex;
          align-items: center;
          gap: 12px;
        }

        .students-title h3 {
          margin: 0;
          color: #1e293b;
          font-size: 20px;
          font-weight: 600;
        }

        .students-count {
          background: rgba(16, 185, 129, 0.1);
          color: #059669;
          padding: 4px 12px;
          border-radius: 20px;
          font-size: 12px;
          font-weight: 600;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .close-students {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 8px 16px;
          background: #f1f5f9;
          color: #64748b;
          border: none;
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.3s ease;
          font-size: 14px;
          font-weight: 500;
        }

        .close-students:hover {
          background: #e2e8f0;
          color: #475569;
        }

        /* Students Grid */
        .students-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
          gap: 20px;
        }

        .student-card {
          background: white;
          border: 2px solid #e2e8f0;
          border-radius: 12px;
          padding: 20px;
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
        }

        .student-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
        }

        .student-card.student-aberto::before {
          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .student-card.student-isento::before {
          background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        }

        .student-card.student-quitado::before {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .student-card.student-indefinido::before {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .student-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
        }

        .student-header {
          margin-bottom: 16px;
        }

        .student-info h4 {
          margin: 0 0 8px;
          color: #1e293b;
          font-size: 16px;
          font-weight: 600;
        }

        .student-meta {
          display: flex;
          gap: 12px;
          align-items: center;
          flex-wrap: wrap;
        }

        .unit-info {
          display: flex;
          align-items: center;
          gap: 4px;
          color: #64748b;
          font-size: 12px;
          font-weight: 500;
        }

        .status-badge {
          display: flex;
          align-items: center;
          gap: 4px;
          padding: 4px 8px;
          border-radius: 6px;
          font-size: 11px;
          font-weight: 600;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .status-aberto {
          background: rgba(245, 158, 11, 0.1);
          color: #d97706;
        }

        .status-isento {
          background: rgba(59, 130, 246, 0.1);
          color: #1d4ed8;
        }

        .status-quitado {
          background: rgba(16, 185, 129, 0.1);
          color: #059669;
        }

        .status-indefinido {
          background: rgba(239, 68, 68, 0.1);
          color: #dc2626;
        }

        /* Student Details */
        .student-details {
          display: flex;
          flex-direction: column;
          gap: 8px;
        }

        .detail-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px 0;
          border-bottom: 1px solid #f1f5f9;
        }

        .detail-item:last-child {
          border-bottom: none;
        }

        .detail-label {
          font-size: 12px;
          color: #64748b;
          font-weight: 500;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .detail-value {
          font-size: 14px;
          color: #1e293b;
          font-weight: 600;
        }

        /* No Students */
        .no-students {
          text-align: center;
          padding: 60px 20px;
          color: #64748b;
        }

        .no-students svg {
          color: #cbd5e1;
          margin-bottom: 20px;
        }

        .no-students h3 {
          margin: 0 0 12px;
          color: #475569;
          font-size: 18px;
          font-weight: 600;
        }

        .no-students p {
          margin: 0;
          font-size: 14px;
        }

        /* Upload Section */
        .upload-section {
          background: white;
          border-radius: 16px;
          padding: 32px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        /* Responsividade */
        @media (max-width: 1200px) {
          .dashboard-content {
            margin-left: 0;
            padding: 20px;
            padding-top: 100px;
          }
        }

        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
            gap: 16px;
            text-align: center;
          }

          .header-actions {
            width: 100%;
            justify-content: stretch;
          }

          .view-btn {
            flex: 1;
            justify-content: center;
          }

          .stats-grid {
            grid-template-columns: 1fr;
          }

          .tabs-navigation {
            flex-direction: column;
          }

          .tab-btn {
            justify-content: center;
          }

          .tax-comparison {
            grid-template-columns: 1fr;
          }

          .students-breakdown {
            justify-content: center;
          }

          .students-summary {
            grid-template-columns: 1fr 1fr;
          }

          .issues-header {
            flex-direction: column;
            gap: 12px;
            text-align: center;
          }
        }

        @media (max-width: 480px) {
          .dashboard-content {
            padding: 16px;
          }

          .dashboard-header,
          .search-section,
          .tab-content {
            padding: 20px;
          }

          .stat-card {
            flex-direction: column;
            text-align: center;
            gap: 12px;
          }

          .students-summary {
            grid-template-columns: 1fr;
          }
        }
      `}</style>
    </div>
  );
}